#SECTION: PCEP-30-02 3.3 Working with Dictionaries in Python

==QUESTION 1==
How do you create an empty dictionary in Python?
[A] dict = {}
[B] dict = []
[C] dict = ()
[D] dict = dict()
CORRECT: A
EXPLANATION: An empty dictionary in Python is created using empty curly braces: dict = {}.

==QUESTION 2==
What is the output of the following code?
```python
d = {'a': 1, 'b': 2, 'c': 3}
print(d['b'])
```
[A] 1
[B] 2
[C] 3
[D] KeyError
CORRECT: B
EXPLANATION: The code prints the value associated with the key 'b', which is 2.

==QUESTION 3==
Which method is used to add a new key-value pair to a dictionary?
[A] d.add(key, value)
[B] d.insert(key, value)
[C] d[key] = value
[D] d.append(key, value)
CORRECT: C
EXPLANATION: To add a new key-value pair to a dictionary, you use the syntax d[key] = value.

==QUESTION 4==
How do you remove a key-value pair from a dictionary?
[A] del d[key]
[B] d.remove(key)
[C] d.pop(key)
[D] Both A and C
CORRECT: D
EXPLANATION: Both del d[key] and d.pop(key) can be used to remove a key-value pair from a dictionary.

==QUESTION 5==
What is the output of this code?
```python
d = {'a': 1, 'b': 2, 'c': 3}
print(list(d.keys()))
```
[A] [1, 2, 3]
[B] ['a', 'b', 'c']
[C] [('a', 1), ('b', 2), ('c', 3)]
[D] Error
CORRECT: B
EXPLANATION: d.keys() returns a view object of the dictionary's keys, and list() converts it to a list of keys.

==QUESTION 6==
How do you check if a key exists in a dictionary?
[A] if key in d:
[B] if d.haskey(key):
[C] if key exists in d:
[D] if d.contains(key):
CORRECT: A
EXPLANATION: The 'in' operator is used to check if a key exists in a dictionary.

==QUESTION 7==
What method returns a list of all values in a dictionary?
[A] d.values()
[B] d.getvalues()
[C] d.allvalues()
[D] values(d)
CORRECT: A
EXPLANATION: The values() method returns a view object of all values in the dictionary.

==QUESTION 8==
What is the output of this code?
```python
d = {'a': 1, 'b': 2, 'c': 3}
for k, v in d.items():
    print(k, v)
```
[A] a 1
    b 2
    c 3
[B] ('a', 1)
    ('b', 2)
    ('c', 3)
[C] Error
[D] None of the above
CORRECT: A
EXPLANATION: The code iterates through the dictionary items, printing each key-value pair on a separate line.

==QUESTION 9==
Which method returns both keys and values as tuples?
[A] d.keyvalues()
[B] d.pairs()
[C] d.items()
[D] d.elements()
CORRECT: C
EXPLANATION: The items() method returns a view object containing the key-value pairs as tuples.

==QUESTION 10==
What happens when you try to access a key that doesn't exist in a dictionary?
[A] Returns None
[B] Raises a KeyError
[C] Returns False
[D] Raises a ValueError
CORRECT: B
EXPLANATION: Attempting to access a non-existent key in a dictionary raises a KeyError.

==QUESTION 11==
How can you get the value of a key, returning a default value if the key doesn't exist?
[A] d.get(key, default_value)
[B] d.fetch(key, default_value)
[C] d.retrieve(key, default_value)
[D] d[key] if key in d else default_value
CORRECT: A
EXPLANATION: The get() method allows you to specify a default value to return if the key is not found in the dictionary.

==QUESTION 12==
What is the output of this code?
```python
d = {'a': 1, 'b': 2, 'c': 3}
d.update({'b': 4, 'd': 5})
print(d)
```
[A] {'a': 1, 'b': 2, 'c': 3, 'd': 5}
[B] {'a': 1, 'b': 4, 'c': 3, 'd': 5}
[C] {'a': 1, 'b': 2, 'c': 3, 'b': 4, 'd': 5}
[D] Error
CORRECT: B
EXPLANATION: The update() method updates existing key-value pairs and adds new ones to the dictionary.

==QUESTION 13==
How do you create a dictionary with default values?
[A] dict.fromkeys(['a', 'b', 'c'], 0)
[B] {'a', 'b', 'c'} = 0
[C] dict.create(['a', 'b', 'c'], 0)
[D] dict(['a', 'b', 'c'], 0)
CORRECT: A
EXPLANATION: dict.fromkeys() creates a new dictionary with specified keys and a default value for all keys.

==QUESTION 14==
What is the output of this code?
```python
d = {'a': 1, 'b': 2, 'c': 3}
print(len(d))
```
[A] 3
[B] 6
[C] ['a', 'b', 'c']
[D] [1, 2, 3]
CORRECT: A
EXPLANATION: The len() function returns the number of key-value pairs in the dictionary, which is 3.

==QUESTION 15==
Which of the following is TRUE about dictionary keys?
[A] Keys must be immutable
[B] Keys can be of any type
[C] Keys can be duplicated
[D] Keys are always strings
CORRECT: A
EXPLANATION: Dictionary keys must be immutable (e.g., strings, numbers, tuples of immutables).

==QUESTION 16==
How can you merge two dictionaries in Python 3.9+?
[A] dict1 + dict2
[B] dict1.merge(dict2)
[C] dict1 | dict2
[D] dict1.update(dict2)
CORRECT: C
EXPLANATION: In Python 3.9+, you can use the | operator to merge dictionaries.

==QUESTION 17==
What is the output of this code?
```python
d = {'a': 1, 'b': 2, 'c': 3}
print(d.pop('b'))
print(d)
```
[A] 2
    {'a': 1, 'c': 3}
[B] {'a': 1, 'c': 3}
    2
[C] None
    {'a': 1, 'c': 3}
[D] KeyError
CORRECT: A
EXPLANATION: pop() removes the specified key and returns its value, then prints the modified dictionary.

==QUESTION 18==
How can you create a dictionary from two lists?
[A] dict(zip(keys, values))
[B] dict.fromkeys(keys, values)
[C] dict.create(keys, values)
[D] {k: v for k, v in keys, values}
CORRECT: A
EXPLANATION: dict(zip(keys, values)) creates a dictionary by pairing elements from two lists.

==QUESTION 19==
What method removes and returns an arbitrary key-value pair as a tuple?
[A] d.remove()
[B] d.pop()
[C] d.popitem()
[D] d.takeout()
CORRECT: C
EXPLANATION: The popitem() method removes and returns an arbitrary key-value pair as a tuple.

==QUESTION 20==
What is the output of this code?
```python
d = {'a': 1, 'b': 2, 'c': 3}
print(sorted(d))
```
[A] [1, 2, 3]
[B] ['a', 'b', 'c']
[C] [('a', 1), ('b', 2), ('c', 3)]
[D] {'a': 1, 'b': 2, 'c': 3}
CORRECT: B
EXPLANATION: sorted(d) returns a sorted list of the dictionary's keys.

==QUESTION 21==
How can you create a dictionary with keys from a list and all values set to 0?
[A] dict.fromkeys(list, 0)
[B] {k: 0 for k in list}
[C] dict(zip(list, [0]*len(list)))
[D] All of the above
CORRECT: D
EXPLANATION: All of these methods can create a dictionary with keys from a list and values set to 0.

==QUESTION 22==
What is the output of this code?
```python
d = {'a': 1, 'b': 2, 'c': 3}
print('b' in d)
print(2 in d)
```
[A] True
    True
[B] True
    False
[C] False
    True
[D] False
    False
CORRECT: B
EXPLANATION: 'in' checks for keys, not values. 'b' is a key, but 2 is not.

==QUESTION 23==
How can you get a list of tuples (key, value) from a dictionary?
[A] list(d)
[B] list(d.keys())
[C] list(d.values())
[D] list(d.items())
CORRECT: D
EXPLANATION: list(d.items()) returns a list of tuples containing key-value pairs.

==QUESTION 24==
What happens when you try to modify a frozen dictionary?
[A] The dictionary is updated
[B] A new dictionary is created
[C] A TypeError is raised
[D] Nothing happens
CORRECT: C
EXPLANATION: Attempting to modify a frozen dictionary (immutable) raises a TypeError.

==QUESTION 25==
How can you create a dictionary with keys from a list and values as the index of each key in the list?
[A] {k: i for i, k in enumerate(list)}
[B] dict.fromkeys(list, range(len(list)))
[C] dict(zip(list, range(len(list))))
[D] Both A and C
CORRECT: D
EXPLANATION: Both dictionary comprehension and dict(zip()) can create a dictionary with list indices as values.