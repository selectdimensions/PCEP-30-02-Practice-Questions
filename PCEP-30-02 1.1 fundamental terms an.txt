#SECTION: PCEP-30-02 1.1 fundamental terms and definitions

==QUESTION 1==
What is the primary function of an interpreter in Python?
[A] To compile the entire code before execution
[B] To execute code line by line
[C] To check for syntax errors only
[D] To optimize code for faster execution

CORRECT: B
EXPLANATION: An interpreter in Python executes code line by line, which allows for immediate execution and easier debugging, but can be slower for larger programs compared to compiled languages.

==QUESTION 2==
Which of the following best describes compilation?
[A] Running code line by line
[B] Translating high-level code to machine code all at once
[C] Checking for runtime errors
[D] Interpreting code in real-time

CORRECT: B
EXPLANATION: Compilation is the process of translating the entire high-level source code into machine code or an intermediate code all at once, before execution.

==QUESTION 3==
What does lexis refer to in programming languages?
[A] The structure of statements
[B] The meaning of statements
[C] The vocabulary of the language
[D] The rules for writing functions

CORRECT: C
EXPLANATION: In programming languages, lexis refers to the vocabulary of the language, including keywords, operators, and other tokens that make up the basic elements of the language.

==QUESTION 4==
In the context of programming languages, what does syntax refer to?
[A] The meaning of statements
[B] The vocabulary of the language
[C] The rules for writing valid statements
[D] The way the program is executed

CORRECT: C
EXPLANATION: Syntax in programming languages refers to the set of rules that define how to write grammatically correct and valid statements in that language.

==QUESTION 5==
What aspect of a programming language does semantics deal with?
[A] The spelling of keywords
[B] The structure of statements
[C] The meaning of statements
[D] The order of execution

CORRECT: C
EXPLANATION: Semantics in programming languages deals with the meaning of statements and how they should be interpreted or executed by the computer.

==QUESTION 6==
Which of the following is true about Python?
[A] It is only a compiled language
[B] It is only an interpreted language
[C] It can be both compiled and interpreted
[D] It is neither compiled nor interpreted

CORRECT: C
EXPLANATION: Python is primarily an interpreted language, but it also uses a compilation step to bytecode. This allows Python to be both compiled (to bytecode) and interpreted, providing a balance of flexibility and performance.

==QUESTION 7==
What is the main difference between an interpreter and a compiler?
[A] Interpreters are faster than compilers
[B] Compilers produce machine code, interpreters don't
[C] Interpreters can't handle complex programs
[D] Compilers are always free, interpreters are not

CORRECT: B
EXPLANATION: The main difference is that compilers translate the entire source code into machine code before execution, while interpreters execute the code line by line without producing machine code.

==QUESTION 8==
In Python, what is responsible for converting source code into bytecode?
[A] The operating system
[B] The Python interpreter
[C] The user's text editor
[D] The Python compiler

CORRECT: B
EXPLANATION: In Python, the interpreter is responsible for converting source code into bytecode. This process happens automatically when a Python script is run.

==QUESTION 9==
What is the correct order of steps in Python code execution?
[A] Lexical analysis, Parsing, Execution
[B] Parsing, Lexical analysis, Execution
[C] Execution, Lexical analysis, Parsing
[D] Lexical analysis, Execution, Parsing

CORRECT: A
EXPLANATION: The correct order is lexical analysis (breaking code into tokens), followed by parsing (analyzing the structure), and then execution.

==QUESTION 10==
What does the Python interpreter do with syntax errors?
[A] Ignores them and continues execution
[B] Fixes them automatically
[C] Reports them and stops execution
[D] Compiles them into machine code

CORRECT: C
EXPLANATION: When the Python interpreter encounters a syntax error, it reports the error to the user and stops the execution of the program. This helps developers identify and fix issues in their code.

==QUESTION 11==
Which of the following is part of Python's lexical structure?
[A] if-else statements
[B] Function definitions
[C] Keywords like 'for' and 'while'
[D] Class inheritance

CORRECT: C
EXPLANATION: Keywords like 'for' and 'while' are part of Python's lexical structure. They are fundamental building blocks (tokens) of the language recognized during lexical analysis.

==QUESTION 12==
What does semantic analysis in Python primarily focus on?
[A] Spelling of variables
[B] Indentation of code
[C] Meaning and logical correctness of statements
[D] Speed of code execution

CORRECT: C
EXPLANATION: Semantic analysis in Python primarily focuses on the meaning and logical correctness of statements. It ensures that the code makes sense and follows the rules of the language beyond just syntax.

==QUESTION 13==
Which phase of code processing deals with identifying tokens like keywords, identifiers, and operators?
[A] Semantic analysis
[B] Lexical analysis
[C] Parsing
[D] Code generation

CORRECT: B
EXPLANATION: Lexical analysis is the phase of code processing that deals with identifying tokens such as keywords, identifiers, and operators. It breaks down the source code into these fundamental elements.

==QUESTION 14==
What is the main advantage of interpreted languages like Python?
[A] They always run faster than compiled languages
[B] They don't need a separate compilation step
[C] They use less memory
[D] They are more secure

CORRECT: B
EXPLANATION: The main advantage of interpreted languages like Python is that they don't need a separate compilation step. This allows for more immediate execution and easier debugging during development.

==QUESTION 15==
In Python, what is the relationship between lexical analysis and syntax analysis?
[A] They are the same thing
[B] Lexical analysis comes after syntax analysis
[C] Lexical analysis comes before syntax analysis
[D] They are completely independent processes

CORRECT: C
EXPLANATION: In Python, lexical analysis comes before syntax analysis. Lexical analysis breaks the code into tokens, which are then used by the syntax analysis (parsing) to check the structural correctness of the code.

==QUESTION 16==
What type of errors does syntactic analysis primarily detect?
[A] Runtime errors
[B] Logical errors
[C] Structural errors in the code
[D] Memory allocation errors

CORRECT: C
EXPLANATION: Syntactic analysis primarily detects structural errors in the code. These are errors that violate the grammar rules of the programming language, such as missing parentheses or incorrect indentation in Python.

==QUESTION 17==
Which of the following is NOT a part of Python's semantic rules?
[A] Variable scope
[B] Type checking
[C] Code indentation
[D] Function return values

CORRECT: C
EXPLANATION: Code indentation is part of Python's syntax, not its semantic rules. While indentation is crucial in Python, it relates to the structure of the code rather than its meaning or logical correctness.

==QUESTION 18==
What is the primary purpose of Python's bytecode?
[A] To make the code human-readable
[B] To optimize memory usage
[C] To provide a platform-independent representation of the program
[D] To encrypt the source code

CORRECT: C
EXPLANATION: The primary purpose of Python's bytecode is to provide a platform-independent representation of the program. This allows Python code to be run on different platforms without recompilation, as long as there's a Python interpreter available.

==QUESTION 19==
In the context of Python, what does PVM stand for?
[A] Python Virtual Machine
[B] Portable Variable Manager
[C] Pre-compilation Verification Module
[D] Post-execution Variable Monitor

CORRECT: A
EXPLANATION: PVM stands for Python Virtual Machine. It's the runtime engine of Python that interprets the bytecode and actually runs the Python program.

==QUESTION 20==
Which statement about Python's execution model is true?
[A] Python code is always compiled to machine code before execution
[B] Python uses a mix of interpretation and compilation (to bytecode)
[C] Python only uses pure interpretation without any compilation
[D] Python requires manual compilation by the programmer

CORRECT: B
EXPLANATION: Python uses a mix of interpretation and compilation. It first compiles the source code to bytecode, which is then interpreted by the Python Virtual Machine (PVM).

==QUESTION 21==
What role does the lexer play in Python's code processing?
[A] It executes the code
[B] It breaks the input into tokens
[C] It checks for logical errors
[D] It optimizes the code

CORRECT: B
EXPLANATION: The lexer in Python's code processing breaks the input source code into tokens. These tokens are the smallest units of meaning in the language, such as keywords, identifiers, and operators.

==QUESTION 22==
Which of the following is a semantic error in Python?
[A] Using a variable before declaring it
[B] Forgetting to close a parenthesis
[C] Using an undefined variable
[D] Misspelling a keyword

CORRECT: C
EXPLANATION: Using an undefined variable is a semantic error in Python. It relates to the meaning and logical correctness of the code, rather than its syntax or structure.

==QUESTION 23==
What is the main difference between syntax and semantics in programming?
[A] Syntax deals with meaning, semantics with structure
[B] Syntax deals with structure, semantics with meaning
[C] They are the same thing
[D] Syntax is for compiled languages, semantics for interpreted languages

CORRECT: B
EXPLANATION: Syntax deals with the structure and grammar of the language, while semantics deals with the meaning of the statements. Syntax is about how you write the code, semantics is about what the code means.

==QUESTION 24==
In Python, what happens immediately after lexical analysis?
[A] Code execution
[B] Semantic analysis
[C] Syntax analysis (parsing)
[D] Bytecode generation

CORRECT: C
EXPLANATION: In Python, immediately after lexical analysis comes syntax analysis, also known as parsing. This step checks if the sequence of tokens produced by the lexical analysis forms a valid structure according to the grammar rules of Python.

==QUESTION 25==
Which of the following is true about Python's interpreter?
[A] It only checks for syntax errors
[B] It converts Python code directly to machine code
[C] It executes Python bytecode
[D] It is only used in the development phase, not in production

CORRECT: C
EXPLANATION: Python's interpreter executes Python bytecode. The source code is first compiled to bytecode, which is then executed by the interpreter (specifically, the Python Virtual Machine).
